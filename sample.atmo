transmittance texture size for cos(VZA): 256
transmittance texture size for altitude: 64

irradiance texture size for cos(SZA): 64
irradiance texture size for altitude: 16

scattering texture size for cos(VZA): 128 # NOTE: this should be even if we ever want to compare output with Bruneton's (because it's int there and is divided by 2, while we use float)
scattering texture size for dot(view,sun): 16
scattering texture size for cos(SZA): 128
scattering texture size for altitude: 64

transmittance integration points: 500
radial integration points: 50

Earth-Sun distance: 1 AU
Earth radius: 6371 km
atmosphere height: 120 km
Rayleigh scattering coefficient at 1 um: 1.24062 Mm^-1 # cross-section * numberDensityAtSeaLevel
Mie scattering coefficient at 1 um: 4.44 Mm^-1 # cross-section * numberDensityAtSeaLevel
Mie angstrom exponent: 0
Mie single scattering albedo: 1.0

Rayleigh scatterer relative density: # relative to number density at sea level
```
    const float rayleighScaleHeight=8*km;
    return exp(-1/rayleighScaleHeight * altitude);
```
Mie scatterer relative density: # relative to number density at sea level
```
    const float mieScaleHeight=1.2*km;
    return exp(-1/mieScaleHeight*altitude);
```
Mie scattering phase function:
```
    const float g=0.76;
    const float g2=g*g;
    const float k = 3/(8*PI)*(1-g2)/(2+g2);
    return vec4(k * (1+sqr(dotViewSun)) / pow(1+g2 - 2*g*dotViewSun, 1.5) + 1/((1-dotViewSun)*600+0.05))*0.904;
```
ozone density: # absolute
```
    const float totalOzoneAmount=300*dobsonUnit;
    if(altitude<10*km || altitude>40*km) return 0;
    if(altitude<25*km)
        return (altitude-10*km)/sqr(25*km-10*km) * totalOzoneAmount;
    return (40*km-altitude)/sqr(40*km-25*km) * totalOzoneAmount;
```
